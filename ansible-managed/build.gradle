apply plugin: 'com.palantir.docker'

def findEnv(String defaultEnv) {
    findProperty('env') ?: defaultEnv
}

def findEnv() {
    findEnv('noenv')
}

import org.apache.tools.ant.filters.ReplaceTokens

def condaEnvName(prjName = project.getName(), env = findEnv()) {
    "${prjName}-${env}".toString()
}

def dockerImageName(def prefix) {
    "${prefix == null ? '' : prefix + '/'}${condaEnvName()}-builder:${project.getVersion()}".toString()
}

def dockerContainerName() {
    "${condaEnvName()}-builder-container".toString()
}

project.pluginManager.withPlugin('com.palantir.docker') {
    if (!file(layout.buildDirectory.dir("docker-state")).exists()) {
        mkdir layout.buildDirectory.dir("docker-state")
    }
}

tasks.docker.dependsOn project(':ansible-ctrl').tasks.dockerRun

docker {
    def dependenciesDir = 'image-dependencies'

    name "${dockerImageName('noamasor')}"
    // Files to be used while building image bu Dockerfile
    copySpec.with {
        into dependenciesDir
        from project(':ansible-ctrl').tasks.dockerRun.outputs.files.singleFile
        from('src/main/resources') {
            filter(ReplaceTokens, tokens: [PROXY_USER : findProperty('artifactoryUser') ?: 'user',
                                           PROXY_PASS : findProperty('artifactoryPass') ?: 'pass',
                                           condaEnvName : condaEnvName()])
        }
    }

    buildArgs([DEPENDENCIES_DIR: "$dependenciesDir",
               BUILD_DIR    : '/tmp/generated',
               CONDA_ENV_NAME : condaEnvName(project(':ansible-conda-pack').name),
               VERSION : project.getVersion(),
               PROXY_USER : findProperty('artifactoryUser') ?: 'user',
               PROXY_PASS : findProperty('artifactoryPass') ?: 'pass'
    ])

    noCache true
}

tasks.named('docker') {
    doLast {
        ant.touch(file:"${buildDir}/docker-state/.image_created")
    }
}

tasks.docker.configure {
    inputs.dir('src/main/resources')
    inputs.file('Dockerfile')
    outputs.file(layout.buildDirectory.dir("docker-state/.image_created"))
}

def prepare = tasks.register('prepare') {
    dependsOn tasks.docker
}
