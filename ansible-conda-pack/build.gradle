apply plugin: 'com.palantir.docker'

def findEnv(String defaultEnv) {
    findProperty('env') ?: defaultEnv
}

def findEnv() {
    findEnv('noenv')
}

import org.apache.tools.ant.filters.ReplaceTokens

def condaEnvName(prjName = project.getName(), env = findEnv()) {
    "${prjName}-${env}".toString()
}

def dockerImageName(def prefix) {
    "${prefix == null ? '' : prefix + '/'}${condaEnvName()}-builder:${project.getVersion()}".toString()
}

def dockerContainerName() {
    "${condaEnvName()}-builder-container".toString()
}

def currentUser() {
    System.getenv("USER")
}

docker {
    def dependenciesDir = 'image-dependencies'

    name "${dockerImageName('noamasor')}"
    // Files to be used while building image bu Dockerfile
    copySpec.with {
        into dependenciesDir
        from('src/main/resources') {
            filter(ReplaceTokens, tokens: [PROXY_USER : findProperty('artifactoryUser') ?: 'user',
                                           PROXY_PASS : findProperty('artifactoryPass') ?: 'pass',
                                           condaEnvName : condaEnvName()])
        }
    }

    buildArgs([DEPENDENCIES_DIR: "$dependenciesDir",
               BUILD_DIR    : '/tmp/conda',
               CONDA_ENV_NAME : condaEnvName(),
               VERSION : project.getVersion(),
               PROXY_USER : findProperty('artifactoryUser') ?: 'user',
               PROXY_PASS : findProperty('artifactoryPass') ?: 'pass'
    ])

    noCache true
}

project.pluginManager.withPlugin('com.palantir.docker-run') {
    if (!file(layout.buildDirectory.dir("dist")).exists()) {
        mkdir layout.buildDirectory.dir("dist")
    }
}

apply plugin: 'com.palantir.docker-run'

dockerRun {
    name "${dockerContainerName()}"
    image "${dockerImageName('noamasor')}"
    volumes "${buildDir}/dist": '/tmp/conda/out'
    daemonize false
    //command 'sleep', '100'
    // plugin v0.26.0 arguments feature has bug
    //arguments "${project.version}"
    env 'IMG_VERSION': "${project.version}"
}

tasks.dockerRun.configure {
    inputs.dir('src/main/resources')
    inputs.file('Dockerfile')
    outputs.dir("${buildDir}/dist")
}